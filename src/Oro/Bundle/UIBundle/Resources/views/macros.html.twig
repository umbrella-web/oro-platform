{% macro collection_prototype(widget) %}
    {% if 'prototype' in widget.vars|keys %}
        {% set form = widget.vars.prototype %}
        {% set name = widget.vars.prototype.vars.name %}
    {% else %}
        {% set form = widget %}
        {% set name = widget.vars.full_name %}
    {% endif %}

    <div data-content="{{ name }}">
        <div class="row-oro oro-multiselect-holder">
            {{ form_errors(form) }}
            {% if form.children|length  %}
                {% for child in form %}
                    {{ form_errors(child) }}
                    {{ form_widget(child) }}
                {% endfor %}
            {% else %}
                {{ form_widget(form) }}
            {% endif %}
            {{ form_rest(form) }}
            <button class="removeRow btn btn-action btn-link" type="button" data-related="{{ name }}">Ã—</button>
        </div>
    </div>
{% endmacro %}

{% macro tooltip(tooltip, tooltip_parameters, tooltip_placement, details_enabled, details_link, details_anchor) %}
    {% set details_anchor = details_anchor|default(null) %}
    {% set details_link = details_link|default(null) %}
    {% set details_enabled = details_enabled|default(false) %}
    {% set tooltip_parameters = tooltip_parameters|default({}) %}
    {% set tooltip_placement = tooltip_placement|default(null) %}
    {% set tooltip = tooltip|trans(tooltip_parameters, "tooltips") %}

    {# Help link logic #}
    {% if details_enabled or details_anchor or details_link %}
        {% set helpLink = details_link|default(get_help_link()) %}
        {% if details_anchor %}
            {% set helpLink = helpLink ~ '#' ~ details_anchor %}
        {% endif %}
        {% set tooltip = tooltip
            ~ '<div class="clearfix"><div class="pull-right"><a href="' ~ helpLink ~ '">'
            ~ 'oro.form.tooltip.read_more'|trans ~ '</a></div></div>'
        %}
    {% endif %}
    {# End help link logic #}

    <i class="icon-info-sign tooltip-icon"
       {% if tooltip_placement %}data-placement="{{ tooltip_placement }}"{% endif %}
       data-content="{{ tooltip }}"
       data-toggle="popover"></i>
{% endmacro %}

{#
    Render flexible attribute row
    Parameters:
        value - flexible attribute
#}
{% macro flexibleAttributeRow(value) %}
    {{ _self.attibuteRow(value.attribute.label, value.__toString|default('N/A')) }}
{% endmacro %}

{#
    Render attribute row
    Parameters:
        title - attribute title
        value - attribute value
        additionalData - array with additional data
#}
{% macro attibuteRow(title, value, additionalData) %}
    {% macro attribute_data(value, additionalData) %}
        <div class="clearfix-oro">
            {% if value.value is not defined  %}
                <div class="control-label">{{ value }}</div>
            {% else %}
                <div class="control-label">{{ value.value }} <strong>{{ value.hint|trans }}</strong></div>
            {% endif %}
        </div>
        {% if additionalData|length %}
            {% for data in additionalData.data %}
                <div class="clearfix-oro">
                    <div class="control-label">{{ attribute(data, additionalData.field) }}</div>
                </div>
            {% endfor %}
        {% endif %}
    {% endmacro %}
    {{ _self.renderAttribute(title, _self.attribute_data(value, additionalData)) }}
{% endmacro %}

{#
    Render attribute row with custom data block
    Parameters:
        title - row title
        data - row data
#}
{% macro renderAttribute(title, data) %}
    <div class="control-group">
        <label class="control-label">{{ title }}</label>
        <div class="controls">
            {{ data|raw }}
        </div>
    </div>
{% endmacro %}

{#
    Render property block
    Parameters:
        title - property title
        data  - property data
#}
{% macro renderProperty(title, data) %}
    {{ _self.renderHtmlProperty(title, data|escape) }}
{% endmacro %}

{#
    Render html property block
    Parameters:
        title - property title
        data  - property data
#}
{% macro renderHtmlProperty(title, data) %}
    {{ _self.renderAttribute(title, '<div class="control-label">' ~ data|default('oro.ui.empty'|trans) ~ '</div>') }}
{% endmacro %}

{#
    Create the link
    Parameters - array:
        [
            'path'  - button url
            'class' - default class
            'aCss'  - additional button class
            'title' - button title
            'iCss'  - css class for 'i' tag (icon)
            'label' - button label
        ]
#}
{% macro link(parameters) %}
    {# need to remove spaces just before label #}
    {% set iconHtml = '' %}
    {% if parameters.iCss is defined %}
        {% set iconHtml %}
        <i class="{{ parameters.iCss }} hide-text" >{{ parameters.label|trans }}</i>
        {% endset %}
    {% else %}
    {% endif %}
    {% spaceless %}
    <a href="{{ parameters.path }}"
        {% if (parameters.id is defined) %}
            id="{{ parameters.id }}"
        {% endif %}
        {% if parameters.data is defined %}
            {% for dataItemName,dataItemValue in parameters.data %}
                data-{{ dataItemName }}="{{ dataItemValue|raw }}"
            {% endfor %}
        {% endif %}
       class="{{ parameters.class is defined? parameters.class : '' }} {{ parameters.aCss is defined? parameters.aCss : '' }}"
       title="{{ parameters.title|trans }}">{{ iconHtml|trim|raw }}{{ parameters.label|trans|trim }}</a>
    {% endspaceless %}
{% endmacro %}

{#
    Create the button
    Parameters - array:
        [
            'path'  - button url
            'aCss'  - additional button class
            'title' - button title
            'iCss'  - css class for 'i' tag (icon)
            'label' - button label
        ]
#}
{% macro button(parameters) %}
    <div class="pull-left btn-group icons-holder">
        {{ _self.link(parameters|merge({'class': 'btn back icons-holder-text'})) }}
    </div>
{% endmacro %}

{#
    Create dropdown button
    Parameters - array:
        [
            'label' - button label
            'elements' - dropdown elements
            'html' - html from placeholder
            'aCss'  - additional drop down class
        ]
#}
{% macro dropdownButton(parameters) %}
    <div class="btn-group">
        <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">
            {% if parameters.iCss is defined %}
                <i class="{{ parameters.iCss }}"></i>
            {% endif %}
            {{ parameters.label|trans }}
            <span class="caret"></span>
        </a>
        <ul class="dropdown-menu {{ parameters.aCss is defined? parameters.aCss : '' }}">
            {% if parameters.elements is defined and parameters.elements is not empty %}
                {% for item in parameters.elements %}
                    {{ _self.dropdownItem(parameters) }}
                {% endfor %}
            {% endif %}
            {% if parameters.html is defined and parameters.html is not empty %}
                {{ parameters.html|raw }}
            {% endif %}
        </ul>
    </div>
{% endmacro %}

{#
    Create the dropdown button item
    Parameters - array:
        [
            'path'  - button url
            'aCss'  - additional button class
            'title' - button title
            'iCss'  - css class for 'i' tag (icon)
            'label' - button label
        ]
#}
{% macro dropdownItem(parameters) %}
    <li>{{ _self.link(parameters) }}</li>
{% endmacro %}

{#
    Create the dropdown button wich preserves last used button
    Parameters - array:
        [
            'html'     - original buttons markup
            'groupKey' - key, to remember last used button
            'options'  - options for pinnedDropdownButtonProcessor widget
        ]
#}
{% macro pinnedDropdownButton(parameters) %}
    {% if isDesktopVersion() %}
        {% set options = parameters.options|default({})|merge({
            groupKey: parameters.groupKey is defined ? parameters.groupKey : '',
            useMainButtonsClone: true
        }) %}
        <div class="pull-right" data-pinned-dropdown-button="{{ options|json_encode }}">
            {{ parameters.html|raw }}
        </div>
    {% else %}
        {{ parameters.html|raw }}
    {% endif %}
{% endmacro %}

{#
    Predefiend pinnedDropdownButton's settings for save button
#}
{% macro dropdownSaveButton(parameters) %}
    {% set parameters = {
        'groupKey': 'saveButtons',
        'options': {
            'moreButtonAttrs': {
                'class': 'btn-success'
            }
        }
    }|merge(parameters|default({})) %}
    {{ _self.pinnedDropdownButton(parameters) }}
{% endmacro %}

{#
    Create 'Cancel' button
    Parameters
        'path' - button url
        'label' - button label | 'Cancel' by default
#}
{% macro cancelButton(path, label = 'Cancel') %}
    {{ _self.button({'path' : path, 'title' : label, 'label' : label}) }}
{% endmacro %}

{#
    Create 'Edit' button
    Parameters - array:
        [
            'path'  - button url
            'aCss'  - additional button class
            'title' - button title | 'Edit' by default
            'label' - button label | 'Edit' by default
            'entity_label' - if specified will be added for title and label
        ]
#}
{% macro editButton(parameters) %}
    {% set iCss = ['icon-edit'] %}
    {% set aCss = ['edit-button', 'main-group'] %}
    {% if parameters.iCss is defined %}
        {% set iCss = parameters.iCss|split(' ')|merge(iCss) %}
    {% endif %}
    {% if parameters.aCss is defined %}
        {% set aCss = parameters.aCss|split(' ')|merge(aCss) %}
    {% endif %}
    {% if parameters.title is defined %}
        {% set title = parameters.title %}
    {% else %}
        {% set title = parameters.entity_label is defined
            ? 'oro.ui.edit_entity'|trans({'%entityName%': parameters.entity_label})
            : 'oro.ui.edit'|trans
        %}
    {% endif %}
    {% set label = parameters.label is defined
        ? parameters.label
        : 'oro.ui.edit'|trans
    %}
    {% set parameters = parameters|merge({
        'iCss': iCss|join(' '),
        'aCss': aCss|join(' '),
        'title': title,
        'label': label
    }) %}
    {{ _self.button(parameters) }}
{% endmacro %}

{#
    Create 'Delete' button
    Parameters - array:
        [
            'aCss'  - additional button class
            'title' - button title
            'label' - button label
            'url'   - path for js handler
        ]
#}
{% macro customDeleteButton(parameters) %}
    {% set aCss = ['edit-button', 'main-group'] %}
    {% if parameters.aCss is defined %}
        {% set aCss = parameters.aCss|split(' ')|merge(aCss) %}
    {% endif %}
    {% if parameters.title is defined %}
        {% set title = parameters.title %}
    {% else %}
        {% set title = parameters.entity_label is defined
        ? 'oro.ui.edit_entity'|trans({'%entityName%': parameters.entity_label})
        : 'oro.ui.edit'|trans
        %}
    {% endif %}
    {% if parameters.dataId is defined %}
        {% set url = url('oro_entityextend_field_remove')~'/'~parameters.dataId %}
    {% else %}
        {% set url = 'unknownID' %}
    {% endif %}
    {% set label = parameters.label is defined
    ? parameters.label
    : 'oro.ui.edit'|trans
    %}
    {% set parameters = parameters|merge({
    'aCss': aCss|join(' btn-danger custom-button-delete-field '),
    'title': title,
    'label': label,
    'id': url,

    }) %}
    {{ _self.button(parameters) }}
{% endmacro %}

{#
    Create 'Restore' button
    Parameters - array:
        [
            'aCss'  - additional button class
            'title' - button title
            'label' - button label
            'url'   - path for js handler
        ]
#}
{% macro customRestoreButton(parameters) %}
    {% set aCss = ['edit-button', 'main-group'] %}
    {% if parameters.aCss is defined %}
        {% set aCss = parameters.aCss|split(' ')|merge(aCss) %}
    {% endif %}
    {% if parameters.title is defined %}
        {% set title = parameters.title %}
    {% else %}
        {% set title = parameters.entity_label is defined
        ? 'oro.ui.edit_entity'|trans({'%entityName%': parameters.entity_label})
        : 'oro.ui.edit'|trans
        %}
    {% endif %}
    {% if parameters.dataId is defined %}
        {% set url = url('oro_entityextend_field_unremove')~'/'~parameters.dataId %}
    {% else %}
        {% set url = 'unknownID' %}
    {% endif %}
    {% set label = parameters.label is defined
    ? parameters.label
    : 'oro.ui.edit'|trans
    %}
    {% set parameters = parameters|merge({
    'aCss': aCss|join(' btn-primary custom-button-restore-field '),
    'title': title,
    'label': label,
    'id': url,
    }) %}
    {{ _self.button(parameters) }}
{% endmacro %}

{#
    Create 'add' button
    Parameters - array:
        [
            'path'  - button url
            'aCss'  - additional button class
            'title' - button title | 'Create' by default
            'label' - button label | 'Create' by default
            'entity_label' - if specified will be added for title and label
        ]
#}
{% macro addButton(parameters) %}
    {% if parameters.label is defined %}
        {% set label = parameters.label %}
    {% else %}
        {% set label = parameters.entity_label is defined
            ? 'oro.ui.create_entity'|trans({'%entityName%': parameters.entity_label})
            : 'oro.ui.create'|trans
        %}
    {% endif %}
    {% if parameters.title is defined %}
        {% set title = parameters.title %}
    {% else %}
        {% set title = parameters.entity_label is defined
            ? 'oro.ui.create_entity'|trans({'%entityName%': parameters.entity_label})
            : 'oro.ui.create'|trans
        %}
    {% endif %}
    <a href="{{ parameters.path }}"
        class="btn main-group btn-primary pull-right {{ parameters.aCss is defined? parameters.aCss : '' }}"
        title="{{ title }}"
    >
        {{ label }}
    </a>
{% endmacro %}

{#
    Delete button with javascript handler
    Parameters - array:
        [
            'aCss' - additional css class for 'a' tag
            'dataId' - data-id parameter
            'dataMessage' - message before delete record | 'Are you sure you want to delete this %entity_label%?' by default
            'dataRedirect' - url to redirect after delete | '%entity_label% deleted' by default
            'dataUrl' - data-url parameter
            'title' - button title | 'Delete' by default
            'label' - button label | 'Delete' by default
            'entity_label' - if specified will be added for title, label and messages| 'item' by default
            'disabled' - if true this control is rendered as disabled
        ]
#}
{% macro deleteButton(parameters) %}
    {% set aCss = 'btn icons-holder-text' %}

    {% if parameters.disabled is defined and parameters.disabled %}
        {% set aCss = aCss ~ ' disabled' %}
    {% endif %}

    {% if parameters.aCss is defined %}
        {% set aCss = aCss ~ ' ' ~ parameters.aCss %}
    {% endif %}

    {% set parameters = parameters|merge({'aCss': aCss}) %}

    <div class="pull-left btn-group icons-holder">
        {{ _self.deleteLink(parameters) }}
    </div>
{% endmacro %}

{% macro deleteLink(parameters) %}
    {% set entityLabel = parameters.entity_label is defined ? parameters.entity_label : 'oro.ui.item'|trans %}
    {% set label = parameters.label is defined ? parameters.label : 'oro.ui.delete'|trans %}
    {% if parameters.title is defined %}
        {% set title = parameters.title %}
    {% else %}
        {% set title = parameters.entity_label is defined
            ? 'oro.ui.delete_entity'|trans({'%entityName%': parameters.entity_label})
            : 'oro.ui.delete'|trans
        %}
    {% endif %}

    {% set message = parameters.dataMessage is defined ? parameters.dataMessage|trans : 'oro.ui.delete_confirm'|trans({ '%entity_label%' : entityLabel }) %}
    {% set successMessage = parameters.successMessage is defined ? parameters.successMessage|trans : 'oro.ui.delete_message'|trans({ '%entity_label%' : entityLabel }) %}
    {% set url = parameters.dataUrl is defined ? parameters.dataUrl : '' %}
    {% set linkParams = {
        'data': {
            'message': message,
            'success-message': successMessage,
            'url': url
        },
        'iCss': 'icon-trash',
        'aCss': parameters.aCss,
        'title': title,
        'label': label,
        'path': 'javascript:void(0);'
    } %}


    {% if (parameters.dataId is defined) %}
        {% set data = linkParams.data|merge({'id': parameters.dataId}) %}
        {% set linkParams = linkParams|merge({ 'data': data }) %}
    {% endif %}
    {% if parameters.dataRedirect is defined %}
        {% set data = linkParams.data|merge({'redirect': parameters.dataRedirect}) %}
        {% set linkParams = linkParams|merge({ 'data': data }) %}
    {% endif %}
    {% if parameters.data is defined %}
        {% for dataItemName,dataItemValue in parameters.data %}
            {% set data = linkParams.data|merge({(dataItemName): dataItemValue}) %}
            {% set linkParams = linkParams|merge({ 'data': data }) %}
        {% endfor %}
    {% endif %}
    {{ _self.link(linkParams) }}
{% endmacro %}

{#
    A button with javascript handler
    Parameters - array:
        [
            'class' - default class
            'aCss' - additional css class for 'a' tag
            'iCss' - additional css class for 'i' tag
            'dataId' - data-id parameter
            'dataUrl' - data-url parameter
            'dataRedirect' - url to redirect after an operation finished
            'successMessage' - a message which will be shown after an operation finished
            'title' - button title
            'label' - button label
            'visible' - determined whether the button is visible or not. Defaults to true,
            'dataAttributes' - additional data attributes
        ]
#}
{% macro clientLink(parameters) %}
    <a href="javascript: void(0);" class="{{ parameters.class is defined ? parameters.class : '' }} {{ parameters.aCss is defined ? parameters.aCss : '' }}"
        {% if (parameters.id is defined) %}
        id="{{ parameters.id }}"
        {% endif %}
        {% if (parameters.dataId is defined) %}
        data-id="{{ parameters.dataId }}"
        {% endif %}
        {% if (parameters.dataUrl is defined) %}
        data-url="{{ parameters.dataUrl }}"
        {% endif %}
        {% if (parameters.successMessage is defined) %}
        data-success-message="{{ parameters.successMessage|trans }}"
        {% endif %}
        {% if parameters.dataRedirect is defined %}
        data-redirect="{{ parameters.dataRedirect  }}"
        {% endif %}
        title="{{ parameters.title is defined ? parameters.title : (parameters.label is defined ? parameters.label : '') }}"
        {% if (parameters.visible is defined and not parameters.visible) %}
        style="display: none"
        {% endif -%}
        {% if parameters.widget is defined and parameters.widget|length %}
            {{ _self.renderWidgetDataAttributes(parameters.widget) }}
        {% endif %}
        {% if parameters.dataAttributes is defined and parameters.dataAttributes|length %}
            {{ _self.renderAttributes(parameters.dataAttributes) }}
        {% endif %}
    >
        {%- if (parameters.iCss is defined) -%}
            <i class="{{ parameters.iCss }} hide-text">{{ parameters.label is defined ? parameters.label : '' }}</i>
        {%- endif %}
        {{- parameters.label is defined ? parameters.label : '' -}}
    </a>
{% endmacro %}

{% macro renderWidgetDataAttributes(options) %}
    {{ _self.renderAttributes(options, 'widget') }}
{% endmacro %}

{% macro renderAttributes(options, prefix) %}
    {% for name, value in options %}
        {% if (value is iterable) %}
            {% set value = value|json_encode(constant('JSON_FORCE_OBJECT')) %}
        {% endif %}
        data-{% if prefix is not empty %}{{ prefix }}-{% endif %}{{ name }}="{{ value }}"
    {% endfor %}
{% endmacro %}

{#
    A button with javascript handler
    Parameters - array:
        [
            'class' - default class
            'aCss' - additional css class for 'a' tag
            'iCss' - additional css class for 'i' tag
            'dataId' - data-id parameter
            'dataUrl' - data-url parameter
            'dataRedirect' - url to redirect after an operation finished
            'successMessage' - a message which will be shown after an operation finished
            'title' - button title
            'label' - button label
            'visible' - determined whether the button is visible or not. Defaults to true
        ]
#}
{% macro clientButton(parameters) %}
    <div class="pull-left btn-group icons-holder">
        {{ _self.clientLink(parameters|merge({'class': 'btn icons-holder-text'})) }}
    </div>
{% endmacro %}

{#
    A button with javascript handler
    Parameters - array:
        [
            'class' - default class
            'aCss' - additional css class for 'a' tag
            'iCss' - additional css class for 'i' tag
            'dataId' - data-id parameter
            'dataUrl' - data-url parameter
            'dataRedirect' - url to redirect after an operation finished
            'successMessage' - a message which will be shown after an operation finished
            'title' - button title
            'label' - button label
            'visible' - determined whether the button is visible or not. Defaults to true
        ]
#}
{% macro dropdownClientItem(parameters) %}
    <li>{{ _self.clientLink(parameters) }}</li>
{% endmacro %}

{#
    Button macros with custom button type
    Parameters - array:
        [
            'type' - button type
            'class' - additional button css classes
            'label' - label of button
        ]
#}
{% macro buttonType(parameters) %}
    <div class="btn-group">
        <button type="{{ parameters.type }}" class="btn {% if (parameters.class is defined) %}{{ parameters.class }}{% endif %}{% if (parameters.action is defined) %} action-button{% endif %}"
                {% if (parameters.action is defined) %}data-action="{{ parameters.action }}"{% endif %}>
            {{ parameters.label|trans }}
        </button>
    </div>
{% endmacro %}

{% macro saveAndCloseButton(label = 'Save and Close') %}
    {{ _self.buttonType({'type': 'submit', 'class': 'btn-success', 'label': label}) }}
{% endmacro %}

{% macro saveAndStayButton(label = 'Save') %}
    {{ _self.buttonType({'type': 'button', 'class': 'btn-success main-group', 'label': label, 'action': 'save_and_stay'}) }}
{% endmacro %}

{#
    Separator between buttons
#}
{% macro buttonSeparator() %}
    <div class="pull-left">
        <div class="separator-btn"></div>
    </div>
{% endmacro %}

{#
    Create scroll sub block for scroll block
    Parameters:
        title - title of sub block
        data - array with data fields (i.e. form_row() or attibuteRow() data)
        isForm - flag what scroll block mut contain the form
        useSpan - flag to indicate is subblock must have css class specified in spanClass parameter or not
        spanClass - css class name of subblock, if this parameter is not specified the css class is span6
#}
{% macro scrollSubblock(title, data, isForm, useSpan, spanClass) %}
    {% set spanClass = spanClass|default('responsive-cell') %}
    {#% if useSpan is not defined or useSpan == true %}
        {% set span = spanClass %}
    {% else %}
        {% set span = '' %}
    {% endif %}
    {% if span %}
        <div class="{{ span }}">
    {% endif %#}
    <div class="{{ spanClass }}">
    {% if title|length %}<h5 class="user-fieldset"><span>{{ title|trans }}</span></h5>{% endif %}
    {% for dataBlock in data %}
        {{ dataBlock|raw }}
    {% endfor %}
    </div>
    {#% if span %}
        </div>
    {% endif %#}
{% endmacro %}

{#
    Create scroll block for scroll data area
    Parameters:
        blockId - id of block
        title - block title
        'subblocks' - array with scroll sub blocks:
            [
                'title' - title of sub block
                'data' - array with data fields (i.e. form_row() or attibuteRow() data)
            ]
        isForm - flag what scroll block mut contain the form
        contentAttributes - additional attributes for block content
        useSubBlockDivider - indicates if 'row-fluid-divider' css class should be added to a row when there are more than one subblocks
#}
{% macro scrollBlock(blockId, title, subblocks, isForm, contentAttributes, useSubBlockDivider) %}
    {% set cols = subblocks|length %}
    <div class="responsive-section">
        <h4 class="scrollspy-title">{{ title }}</h4>
        <div id="{{ blockId }}" class="scrollspy-nav-target"></div>
        <div class="row-fluid{% if (contentAttributes is defined and contentAttributes.class is defined and contentAttributes.class|length) %} {{ contentAttributes.class }}{% endif %}{% if cols > 1 and (useSubBlockDivider is not defined or useSubBlockDivider == true) %} row-fluid-divider{% endif %}" {{ _self.attributes(contentAttributes, ['class']) }}>
            {% if isForm is defined and isForm == true %}
                <fieldset class="form-horizontal">
            {% else %}
                <div class="form-horizontal">
            {% endif %}
                {% for subblock in subblocks %}
                    {{ _self.scrollSubblock(subblock.title is defined and subblock.title|length ? subblock.title : null, subblock.data, isForm, subblock.useSpan is defined ? subblock.useSpan : true, subblock.spanClass is defined ? subblock.spanClass : '') }}
                {% endfor %}
            {% if isForm is defined and isForm == true %}
                </fieldset>
            {% else %}
                </div>
            {% endif %}
        </div>
    </div>
{% endmacro %}

{#
    Create scroll blocks (like in view or update pages)
    Parameters:
        dataTarget - id of scroll block
        data - array with scroll data blocks
        form
    data parameter structure:
        [
            'dataBlocks' - array of blocks. each block consist of:
                [
                    'title' - title of scroll block
                    'priority' - a number that can be used to change the order of blocks
                    'class' - additional css class for scroll block menu item
                    'useSubBlockDivider' - [optional] indicates if 'row-fluid-divider' css class should be added to a row when there are more than one subblocks
                    'subblocks' - array with scroll sub blocks:
                        [
                            'title' - title of sub block
                            'data' - array with data fields (i.e. form_row() or attibuteRow() data)
                        ]
                ]
            'formErrors' - errors from the form
            'hiddenData' - additional data (hidden fields from the form)
        ]
#}
{% macro scrollData(dataTarget, data, form = null) %}
    {% if form is defined and form %}
        {% set isForm = true %}
    {% else %}
        {% set isForm = false %}
    {% endif %}

    {% set dataBlocks = data.dataBlocks|oro_sort_by %}

    <div id="{{ dataTarget }}" class="navbar navbar-static scrollspy-nav">
        <div class="navbar-inner">
            <div class="container-fluid" style="width: auto;">
                <ul class="nav">
                    {% for navElement in dataBlocks %}
                        <li {% if navElement.class is defined %}class="{{ navElement.class }}"{% endif %}><a href="#scroll-{{ loop.index }}">{{ navElement.title }}</a></li>
                    {% endfor %}
                </ul>
            </div>
        </div>
    </div>
    <div class="clearfix">
        {% if data.formErrors is defined and data.formErrors | length%}
            <div class="customer-info-actions container-fluid well-small alert-wrap">
                <div class="alert alert-error">
                    <button class="close" type="button" data-dismiss="alert" data-target=".alert-wrap">Ã—</button>
                    {{ data.formErrors|raw }}
                </div>
            </div>
        {% endif %}
        <div data-spy="scroll" data-target="#{{ dataTarget }}" data-offset="1" class="scrollspy container-fluid scrollable-container{% if isForm %} form-container{% endif %}">
            {% for scrollBlock in dataBlocks %}
                {{ _self.scrollBlock("scroll-" ~ loop.index, scrollBlock.title, scrollBlock.subblocks, isForm, scrollBlock.content_attr is defined ? scrollBlock.content_attr : null, scrollBlock.useSubBlockDivider is defined ? scrollBlock.useSubBlockDivider : true) }}
            {% endfor %}
            {% if data.hiddenData is defined or isForm %}
                <div class="hide">
                    {% if data.hiddenData is defined %}
                        {{ data.hiddenData|raw }}
                    {% endif %}
                    {% if isForm %}
                        {{ form_rest(form) }}
                    {% endif %}
                </div>
            {% endif %}
        </div>
    </div>
{% endmacro %}

{#
    Create collection field block
    Parameters:
        field - form collection field
        label - label of block
        buttonCaption - Caption of add entity button
#}
{% macro collectionField(field, label, buttonCaption) %}
    <div class="control-group">
        <label class="control-label">{{ label|trans }}</label>
        <div class="controls">
            <div class="row-oro">
                <div class="collection-fields-list" data-prototype="{{ _self.collection_prototype(field)|escape }}">
                    {% for emailField in field.children %}
                        {{ _self.collection_prototype(emailField) }}
                    {% endfor %}
                </div>
                <a class="btn add-list-item" href="javascript: void(0);">{{ buttonCaption|trans }}</a>
            </div>
        </div>
    </div>
{% endmacro %}

{#
    Render attributes of HTML element.
    Parameters:
        attr - attributes
        excludes - names of attributes which should not be rendered even if they exist in attr parameter
#}
{% macro attributes(attr, excludes) %}
    {% spaceless %}
        {% set attr = attr|default({}) %}
        {% for attrname, attrvalue in attr %}{% if not excludes is defined or not excludes[attrname] is defined %}{% if attrname in ['placeholder', 'title'] %}{{ attrname }}="{{ attrvalue|trans({}, translation_domain) }}" {% else %}{{ attrname }}="{{ attrvalue }}" {% endif %}{% endif %}{% endfor %}
    {% endspaceless %}
{% endmacro %}

{#
    Render link to entity owner
    Parameters:
        entity - entity record
#}
{% macro entityOwnerLink(entity) %}
    {%- if entity.owner is defined and entity.owner %}
        {% if resource_granted('VIEW', entity.owner)  %}
            {% set ownerType = oro_get_owner_type(entity) %}
            {% if (ownerType == 'USER') %}
                {% set ownerPath = path('oro_user_view', {'id': entity.owner.id}) %}
                {% set ownerName = entity.owner|oro_format_name %}
            {% elseif (ownerType == 'BUSINESS_UNIT') %}
                {% set ownerPath = path('oro_business_unit_view', {'id': entity.owner.id}) %}
                {% set ownerName = entity.owner.name %}
            {% endif %}
            {% if ownerName is defined %}
                {{ 'oro.ui.owner'|trans }}:
                {% if ownerPath is defined %}
                    <a href="{{ ownerPath }}">{{ ownerName }}</a>
                {% else %}
                    {{ ownerName }}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif -%}
{% endmacro %}

{%- macro renderUrl(url, title, class) -%}
    {% spaceless %}
        {% if title is empty %}
            {% set title = url %}
        {% endif %}
        {% if class is empty %}
            {% set class = '' %}
        {% endif %}
        {% if url is not empty %}
            <a href="{{ url|raw }}" title="{{ title|escape('html_attr') }}" class="{{ class }}">{{ title|escape }}</a>
        {% endif %}
    {% endspaceless %}
{%- endmacro -%}

{%- macro renderPhone(phone, title) -%}
    {% if title is empty %}
        {% set title = phone %}
    {% endif %}
    {% if phone is not empty %}
        <a href="tel:{{ phone|escape('html_attr') }}" title="{{ title|escape('html_attr') }}">{{ title|escape }}</a>
    {% endif %}
{%- endmacro -%}

{% macro getApplicableForUnderscore(str) %}
    {{ str|replace({
        "<script": '<% print("<sc" + "ript"); %>',
        "</script": '<% print("</sc" + "ript"); %>',
        "<%": '<% print("<" + "%"); %>',
        "%>": '<% print("%" + ">"); %>',
    })|raw }}
{% endmacro %}
